<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>AS.AS_Cluster</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" /> 
  </head>
  <body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for AS.AS_Cluster</h1><div class="highlight"><pre>
<span></span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">scipy.spatial</span> <span class="k">import</span> <span class="n">Voronoi</span><span class="p">,</span><span class="n">Delaunay</span>
<span class="kn">from</span> <span class="nn">scipy.cluster.hierarchy</span> <span class="k">import</span> <span class="n">linkage</span><span class="p">,</span><span class="n">fcluster</span>
<span class="kn">from</span> <span class="nn">AS.AS_Funct</span> <span class="k">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">mdtraj.core.topology</span> <span class="k">import</span> <span class="n">Topology</span>
<span class="kn">from</span> <span class="nn">mdtraj.core.trajectory</span> <span class="k">import</span> <span class="n">Trajectory</span>


<span class="c1"># noinspection PyAttributeOutsideInit,PyAttributeOutsideInit,PyAttributeOutsideInit,PyAttributeOutsideInit,PyAttributeOutsideInit,PyAttributeOutsideInit,PyTypeChecker</span>
<div class="viewcode-block" id="AS_Cluster"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Cluster">[docs]</a><span class="k">class</span> <span class="nc">AS_Cluster</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">receptor</span><span class="p">,</span><span class="n">config</span><span class="p">,</span><span class="n">snapshot_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">parent</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Container for alpha, beta, gamma atoms</span>
<span class="sd">        :param receptor_snapshot: coordinates of parent receptor</span>
<span class="sd">        :param config: configuration file</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="n">config</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">receptor_traj</span> <span class="o">=</span> <span class="n">receptor</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">receptor_top</span> <span class="o">=</span> <span class="n">receptor</span><span class="o">.</span><span class="n">top</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">snapshot_idx</span> <span class="o">=</span> <span class="n">snapshot_idx</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">top</span> <span class="o">=</span> <span class="n">Topology</span><span class="p">()</span>
        <span class="c1"># create empty initial chain and residue as atom containers</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">add_chain</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">add_residue</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;ASC&#39;</span><span class="p">,</span><span class="n">chain</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
        <span class="n">xyz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">traj</span> <span class="o">=</span> <span class="n">Trajectory</span><span class="p">(</span><span class="n">xyz</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">atom_polarity</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span>
            <span class="p">[(</span><span class="nb">str</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">element</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;nitrogen&#39;</span><span class="p">,</span> <span class="s1">&#39;oxygen&#39;</span><span class="p">,</span> <span class="s1">&#39;sulfur&#39;</span><span class="p">])</span> <span class="k">for</span> <span class="n">atom</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">receptor_top</span><span class="o">.</span><span class="n">atoms</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tessellation</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pockets</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&quot;Alpha Atom cluster of #</span><span class="si">{}</span><span class="s2"> frame&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">snapshot_idx</span><span class="p">)</span>

<div class="viewcode-block" id="AS_Cluster.tessellation"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Cluster.tessellation">[docs]</a>    <span class="k">def</span> <span class="nf">tessellation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">config</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        perform tessellation in order to generate the cluster of alpha atoms.</span>
<span class="sd">        :param config: object</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># Generate Raw Tessellation vertices</span>
        <span class="n">raw_alpha_lining</span> <span class="o">=</span> <span class="n">Delaunay</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">receptor_traj</span><span class="o">.</span><span class="n">xyz</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">simplices</span>
        <span class="n">raw_alpha_xyz</span> <span class="o">=</span> <span class="n">Voronoi</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">receptor_traj</span><span class="o">.</span><span class="n">xyz</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">vertices</span>
        <span class="n">raw_lining_xyz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">receptor_traj</span><span class="o">.</span><span class="n">xyz</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">raw_alpha_lining</span><span class="p">[:,</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

        <span class="c1"># Calculate Raw alpha sphere radii</span>
        <span class="n">raw_alpha_sphere_radii</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">norm</span><span class="p">(</span><span class="n">raw_lining_xyz</span> <span class="o">-</span> <span class="n">raw_alpha_xyz</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

        <span class="c1"># Filter the data based on radii</span>
        <span class="n">filtered_idx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">min_r</span> <span class="o">/</span> <span class="mf">10.0</span> <span class="o">&lt;=</span> <span class="n">raw_alpha_sphere_radii</span><span class="p">,</span><span class="n">raw_alpha_sphere_radii</span> <span class="o">&lt;=</span> <span class="n">config</span><span class="o">.</span><span class="n">max_r</span> <span class="o">/</span> <span class="mf">10.0</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">filtered_lining</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="n">raw_alpha_lining</span><span class="p">,</span><span class="n">filtered_idx</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_lining</span> <span class="o">=</span> <span class="n">filtered_lining</span>
        <span class="n">filtered_xyz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="n">raw_alpha_xyz</span><span class="p">,</span><span class="n">filtered_idx</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

        <span class="c1"># cluster the remaining vertices to give index of belonging pockets</span>
        <span class="n">zmat</span> <span class="o">=</span> <span class="n">linkage</span><span class="p">(</span><span class="n">filtered_xyz</span><span class="p">,</span><span class="n">method</span><span class="o">=</span><span class="s1">&#39;average&#39;</span><span class="p">)</span>
        <span class="n">cluster</span> <span class="o">=</span> <span class="n">fcluster</span><span class="p">(</span><span class="n">zmat</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">pocket_cluster_distance</span> <span class="o">/</span> <span class="mi">10</span><span class="p">,</span><span class="n">criterion</span><span class="o">=</span><span class="s1">&#39;distance&#39;</span><span class="p">)</span> <span class="c1"># /10 turn A to nm</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span> <span class="o">=</span> <span class="n">cluster</span> <span class="o">-</span><span class="mi">1</span> <span class="c1"># cluster index start from 1</span>

        <span class="c1"># Reorganize into list of pockets</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pocket_alpha_atoms</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">alpha_cluster_i</span><span class="p">,</span> <span class="n">alpha_atom_idx</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span><span class="p">)))):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pocket_alpha_atoms</span><span class="p">[</span><span class="n">alpha_cluster_i</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">alpha_atom_idx</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pocket_alpha_atoms</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">add_residue</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;ASC&#39;</span><span class="p">,</span><span class="n">chain</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">pocket_index</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">add_atom</span><span class="p">(</span><span class="s1">&#39;AAC&#39;</span><span class="p">,</span><span class="kc">None</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">residue</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span><span class="n">i</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">traj</span><span class="o">.</span><span class="n">xyz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">filtered_xyz</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

        <span class="c1"># todo generate bac and acc and set as pocket residue atom name</span>
        <span class="c1"># todo write methods for retrieving these information</span>

        <span class="n">filtered_lining_xyz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">receptor_traj</span><span class="o">.</span><span class="n">xyz</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_lining</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

        <span class="c1"># calculate the polarity of alpha atoms</span>
        <span class="n">total_score</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">getTetrahedronVolume</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">filtered_lining_xyz</span><span class="p">])</span>
        <span class="n">polar_ratio</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">average</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">atom_polarity</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_lining</span><span class="p">),</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">polar_score</span> <span class="o">=</span> <span class="n">total_score</span> <span class="o">*</span> <span class="n">polar_ratio</span>
        <span class="n">nonpolar_score</span> <span class="o">=</span> <span class="n">total_score</span> <span class="o">-</span> <span class="n">polar_ratio</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_score</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">stack</span><span class="p">([</span><span class="n">total_score</span><span class="p">,</span> <span class="n">polar_score</span><span class="p">,</span> <span class="n">nonpolar_score</span><span class="p">],</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
        <span class="c1"># also initialize contact score</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_contact</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">n_atoms</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span></div>

<div class="viewcode-block" id="AS_Cluster.build_beta_atoms"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Cluster.build_beta_atoms">[docs]</a>    <span class="k">def</span> <span class="nf">build_beta_atoms</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        cluster all alpha atoms into either beta atoms or pocket atoms (gamma)</span>
<span class="sd">        :param into: str, &#39;gamma&#39; or &#39;beta&#39;</span>
<span class="sd">        :return:</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">zmat</span> <span class="o">=</span> <span class="n">linkage</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">traj</span><span class="o">.</span><span class="n">xyz</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">method</span><span class="o">=</span><span class="s1">&#39;average&#39;</span><span class="p">)</span>
        <span class="n">cluster</span> <span class="o">=</span> <span class="n">fcluster</span><span class="p">(</span><span class="n">zmat</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">beta_cluster_cutoff</span> <span class="o">/</span> <span class="mi">10</span><span class="p">,</span><span class="n">criterion</span><span class="o">=</span><span class="s1">&#39;distance&#39;</span><span class="p">)</span></div>

<div class="viewcode-block" id="AS_Cluster.calculate_contact"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Cluster.calculate_contact">[docs]</a>    <span class="k">def</span> <span class="nf">calculate_contact</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">coordinates</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        calculate which point in the alpha cluster is in contact with the given coordinates</span>
<span class="sd">        :param coordinates: Array</span>
<span class="sd">        :return:</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">np</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_contact</span><span class="p">,</span>
               <span class="n">checkContact</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">traj</span><span class="o">.</span><span class="n">xyz</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">coordinates</span><span class="p">,</span><span class="n">threshold</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">contact_threshold</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="mi">1</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_space_contact</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_score</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_contact</span><span class="p">)</span></div>

<div class="viewcode-block" id="AS_Cluster.get_lining_atoms"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Cluster.get_lining_atoms">[docs]</a>    <span class="k">def</span> <span class="nf">get_lining_atoms</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index_list</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        get a set of surface lining atoms in the given cluster of alpha atoms</span>
<span class="sd">        :type index_list: list</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_lining</span><span class="p">,</span> <span class="n">index_list</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span><span class="p">())</span></div>

<div class="viewcode-block" id="AS_Cluster.get_lining_residues"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Cluster.get_lining_residues">[docs]</a>    <span class="k">def</span> <span class="nf">get_lining_residues</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index_list</span><span class="p">):</span>
        <span class="n">lining_atom_idx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_lining</span><span class="p">,</span> <span class="n">index_list</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span>
        <span class="n">lining_atom</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">atoms</span><span class="p">),</span><span class="n">lining_atom_idx</span><span class="p">)</span>
        <span class="n">lining_residue_idx</span> <span class="o">=</span> <span class="p">[</span><span class="n">atom</span><span class="o">.</span><span class="n">residue</span><span class="o">.</span><span class="n">index</span> <span class="k">for</span> <span class="n">atom</span> <span class="ow">in</span> <span class="n">lining_atom</span><span class="p">]</span>

        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">lining_residue_idx</span><span class="p">)</span></div>

<div class="viewcode-block" id="AS_Cluster.get_cluster_centroid"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Cluster.get_cluster_centroid">[docs]</a>    <span class="k">def</span> <span class="nf">get_cluster_centroid</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">cluster</span><span class="p">):</span>
        <span class="n">xyz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">traj</span><span class="o">.</span><span class="n">xyz</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">cluster</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">xyz</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span></div>


<div class="viewcode-block" id="AS_Cluster.screen_by_contact"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Cluster.screen_by_contact">[docs]</a>    <span class="k">def</span> <span class="nf">screen_by_contact</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="n">contact_alpha_atoms</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_contact</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">contact_pocket</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span><span class="p">,</span><span class="n">contact_alpha_atoms</span><span class="p">))</span>
        <span class="c1">#</span>
        <span class="c1"># contact_pocket_alpha_atom_index = [np.array(np.where(self.alpha_atom_pocket_index == i)) for i in contact_pocket]</span>

        <span class="n">contact_pocket_alpha_atom_index</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span> <span class="o">==</span> <span class="n">contact_pocket</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">contact_pocket</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="n">contact_pocket_alpha_atom_index</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">contact_pocket_alpha_atom_index</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_pocket_index</span> <span class="o">==</span> <span class="n">i</span><span class="p">)))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_update_alpha_atoms</span><span class="p">(</span><span class="n">contact_pocket_alpha_atom_index</span><span class="p">)</span></div>

    <span class="k">def</span> <span class="nf">_update_alpha_atoms</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_alpha_index</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">traj</span><span class="o">.</span><span class="n">atom_slice</span><span class="p">(</span><span class="n">new_alpha_index</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">top</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">traj</span><span class="o">.</span><span class="n">top</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_lining</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_lining</span><span class="p">,</span> <span class="n">new_alpha_index</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_contact</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_contact</span><span class="p">,</span> <span class="n">new_alpha_index</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_score</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_score</span><span class="p">,</span> <span class="n">new_alpha_index</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">pocket_idx</span><span class="p">,</span><span class="n">pocket</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">residues</span><span class="p">):</span>
            <span class="n">pocket</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">pocket_idx</span>


    <span class="k">def</span> <span class="nf">_build_pockets</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">pockets</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">p_residue</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">top</span><span class="o">.</span><span class="n">residues</span><span class="p">:</span>
            <span class="n">alpha_atom_idx</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pocket_alpha_atoms</span><span class="p">[</span><span class="n">p_residue</span><span class="o">.</span><span class="n">index</span><span class="p">]</span>
            <span class="n">p_total_score</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_score</span><span class="p">,</span> <span class="n">alpha_atom_idx</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">p_contact_score</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span>
                <span class="n">np</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_score</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">alpha_atom_contact</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
                        <span class="n">alpha_atom_idx</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">lining_atoms</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_lining_atoms</span><span class="p">(</span><span class="n">alpha_atom_idx</span><span class="p">)</span>
            <span class="n">lining_residues</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_lining_residues</span><span class="p">(</span><span class="n">alpha_atom_idx</span><span class="p">)</span>
            <span class="n">pocket</span> <span class="o">=</span> <span class="n">AS_Pocket</span><span class="p">(</span><span class="n">contact_score</span><span class="o">=</span><span class="n">p_contact_score</span><span class="p">,</span> <span class="n">total_score</span><span class="o">=</span><span class="n">p_total_score</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">p_residue</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>
            <span class="n">pocket</span><span class="o">.</span><span class="n">lining_atoms</span> <span class="o">=</span> <span class="n">lining_atoms</span>
            <span class="n">pocket</span><span class="o">.</span><span class="n">lining_residues</span> <span class="o">=</span> <span class="n">lining_residues</span>
            <span class="n">pockets</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pocket</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pockets</span> <span class="o">=</span> <span class="n">pockets</span></div>


<div class="viewcode-block" id="AS_Pocket"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Pocket">[docs]</a><span class="k">class</span> <span class="nc">AS_Pocket</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">contact_score</span><span class="p">,</span><span class="n">total_score</span><span class="p">,</span><span class="n">parent</span><span class="p">,</span><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">index</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">snapshot_idx</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">snapshot_idx</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_contact_score</span> <span class="o">=</span> <span class="n">contact_score</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_total_score</span> <span class="o">=</span> <span class="n">total_score</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_component_lookup</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;all&#39;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;polar&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;nonpolar&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">}</span>


<div class="viewcode-block" id="AS_Pocket.get_contact_score"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Pocket.get_contact_score">[docs]</a>    <span class="k">def</span> <span class="nf">get_contact_score</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">component</span> <span class="o">=</span> <span class="s1">&#39;all&#39;</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">component</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_component_lookup</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_contact_score</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">_component_lookup</span><span class="p">[</span><span class="n">component</span><span class="p">]]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span><span class="p">(</span><span class="s2">&quot;Invalid component name, please use all, polar, or nonpolar, you used </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">component</span><span class="p">))</span></div>

<div class="viewcode-block" id="AS_Pocket.get_total_score"><a class="viewcode-back" href="../../AS.xhtml#AS.AS_Cluster.AS_Pocket.get_total_score">[docs]</a>    <span class="k">def</span> <span class="nf">get_total_score</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">component</span> <span class="o">=</span> <span class="s1">&#39;all&#39;</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">component</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_component_lookup</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_total_score</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">_component_lookup</span><span class="p">[</span><span class="n">component</span><span class="p">]]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="p">(</span><span class="s2">&quot;Invalid component name, please use all, polar, or nonpolar, you used </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">component</span><span class="p">))</span></div>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&quot;Pocket </span><span class="si">{}</span><span class="s2"> with total score of </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">index</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">get_total_score</span><span class="p">(</span><span class="s1">&#39;all&#39;</span><span class="p">))</span></div>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>