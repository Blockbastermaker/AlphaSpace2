### calculate vina score of water molecules in pdb structure and screen out those water molecules with vina_score > -1 kcal/mol ###

import sys
import os
import re
import pandas as pd


def convert_to_pdbqt(infile):
    '''
    Convert pdb structure to pdbqt file without droping out non-standard residues

    '''
    outfile = '%s.pdbqt' % os.path.basename(infile).split('.')[0]
    run_pdbqt = '~/MGLTools-1.5.6/MGLToolsPckgs/AutoDockTools/Utilities24/prepare_receptor4.py'  ##set the run_pdbqt path

    # convert to pdbqt file by using AutoDock Tools
    os.system('%s -r %s -o %s -U lps' % (run_pdbqt, infile, outfile))

    # assign default charge on oxygen atom of water
    os.system("sed 's/ 0.000 OA/-0.411 OA/g' -i %s" % outfile)

    return outfile


def affinity_match(signal):
    '''
    Match the pattern of affinity generated by vina --score_only

    '''
    match = re.search(r'Affinity:\s(\S+) ', signal)

    if match:
        return match.group(1)
    else:
        return 'None'


def get_wat_id(filename):
    '''
    Get water id (residue_chain_resnum), for example: 'HOH A2001'

    '''
    f_in = open(filename, 'r')
    wat_id = []  # water id
    wat_b = []  # water bfactor

    for i in f_in.readlines():
        if i.startswith(('HETATM', 'ATOM')) and i[17:20] == 'HOH':
            wat_id.append(i[17:26])
            wat_b.append(i[60:66])
    f_in.close()

    df = pd.DataFrame(list(zip(wat_id, wat_b)), columns=['Wat_id', 'Bfactor'])

    return df


def calculate_score(filename, wat_id):
    '''
    calculate vina score of water in the environment

    '''
    new_rep = '%s_test.pdbqt' % os.path.basename(filename).split('.')[0]
    wat_test = 'test_wat.pdb'

    # get receptor for docking
    os.system("grep -v '%s' %s > %s" % (wat_id, filename, new_rep))

    # get water ligand for docking
    os.system("grep '%s' %s > %s" % (wat_id, filename, wat_test))

    smina = 'smina'  ## set the smina path
    # perform vina --score_only
    signal = os.popen('%s --seed 1 -r %s -l %s --score_only' % (smina, new_rep, wat_test)).read()

    score = affinity_match(signal)

    os.system('rm %s %s' % (new_rep, wat_test))

    return float(score)


def screen_by_score(df, input_pdb, cutoff=-1.0):
    '''
    screen water molecules by the corresponding vina score ( default: cutoff = -1.0 kcal/mol)

    '''
    # screen by vina_score
    df = df[df['vina_score'] > cutoff]
    List = [x for x in df['Wat_id']]

    f_in = open(input_pdb, 'r')

    output_pdb = '%s_wat.pdb' % os.path.basename(input_pdb).split('.')[0]
    f_out = open(output_pdb, 'w')

    for i in f_in.readlines():
        if i[17:26] not in List:
            f_out.write(i)
        else:
            continue

    f_in.close()
    f_out.close()

    return output_pdb


def main():
    args = sys.argv[1:]

    if not args:
        print('usage: python get_wat_id.py [--pdb] complex.pdb')

        sys.exit(1)

    elif sys.argv[1] == '--help':
        print('usage: python get_wat_id.py [--pdb] complex.pdb')

        sys.exit(1)

    elif sys.argv[1] == '--pdb':

        filename = convert_to_pdbqt(sys.argv[2])
        df = get_wat_id(filename)
        wat_list = df['Wat_id']

        outfile = '%s_all_wat.csv' % os.path.basename(filename)[:6]
        score_list = []

        for i in wat_list:
            score_list.append(calculate_score(filename, i))

        df = df.assign(vina_score=pd.Series(score_list, index=df.index))

        # write down water information (wat_id, bfactor, vina_score)
        df.to_csv(outfile)
        # write down screened pdb file
        output_pdb = screen_by_score(df, sys.argv[2], -1.0)
        # convert screened pdb file to pdbqt file
        convert_to_pdbqt(output_pdb)

    else:
        sys.exit(1)


if __name__ == '__main__':
    main()
