"""
Read from dpocket log generated by:
load_dtm_file.py

"""

import sys
import numpy as np
import matplotlib.pyplot as plt


class dp_log():
    def __init__(self, *args):
        self.fluctuation, self.space, self.space_std, self.occupancy, self.occurrence, self.total_snapshot = args

    @property
    def stability(self):
        return self.occurrence / self.total_snapshot


def parser(lines):
    data = []

    for line in lines[1:]:
        fluctuation, space, space_std, occupancy, occurrence, total_snapshot = map(float, line.split())
        data.append(dp_log(fluctuation, space, space_std, occupancy, occurrence, total_snapshot))

    return data


def plot_occupancy_stability(lines):
    # data = [dp for dp in parser(lines) if dp.stability > 0.4]
    ## Screen all dpockets less than 40%

    data = parser(lines)
    data = data[:int(len(data) / 10)]

    ## first 10 percent

    data.sort(key=lambda a: a.stability,reverse=True)

    fig = plt.figure()
    ax = fig.gca()

    xs = np.arange(len(data))

    y1 = np.array([d.occupancy for d in data])
    y2 = np.array([d.stability for d in data])

    ax.bar(xs, y1)
    ax.plot(xs, y2)

    plt.xlabel("D-pocket index")

    plt.ylabel("occupancy/ stability")

    plt.title("occupancy(line) cs stability(bar)")

    plt.xticks(xs,rotation='vertical')

    plt.show()

def snapshot_folder_navigation(ss_folder, target_name ):
    import os

    ss_folder = os.path.abspath(ss_folder)

    log_path = {}

    for protein in os.listdir(ss_folder):
        prot_path = os.path.join(ss_folder,protein)
        if os.path.isdir(protein):
            for complex in os.listdir(prot_path):
                cmplx_path = os.path.join(prot_path,complex)
                if os.path.isdir(cmplx_path):
                    log_path[(protein,complex)] = os.path.join(cmplx_path,target_name)
    return log_path






if __name__ == '__main__':
    for cmplx_name , path in snapshot_folder_navigation(sys.argv[1],'dpocket.log').items():




        try:
            with open(path, 'r') as handle:
                lines = handle.readlines()[1:]
            dp_count = len(parser(lines))
        except:
            dp_count = 'NA'

        print(cmplx_name[0],cmplx_name[1],dp_count)

